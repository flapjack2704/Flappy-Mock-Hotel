{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../hotel-apiservice.service\";\nimport * as i2 from \"@angular/common\";\nfunction RoomVacanciesComponent_tr_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const vac_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", vac_r2.roomNo, \": \", vac_r2.pricePerNight, \" per night\");\n  }\n}\nfunction RoomVacanciesComponent_tr_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const room_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", room_r3.roomNo, \": type = \", room_r3.roomType, \", \", room_r3.pricePerNight, \" per night \");\n  }\n}\nclass Room {\n  constructor(id, roomNo, roomType, pricePerNight) {\n    this.id = id;\n    this.roomNo = roomNo;\n    this.roomType = roomType;\n    this.pricePerNight = pricePerNight;\n  }\n}\nclass Guest {\n  constructor(id, firstname, lastname, email, phone) {\n    this.id = id;\n    this.firstname = firstname;\n    this.lastname = lastname;\n    this.email = email;\n    this.phone = phone;\n  }\n}\nclass Booking {\n  constructor(id, startDate, endDate, room, roomId, guest, guestId, totalPrice, partySize) {\n    this.id = id;\n    this.startDate = startDate;\n    this.endDate = endDate;\n    this.room = room;\n    this.roomId = roomId;\n    this.guest = guest;\n    this.guestId = guestId;\n    this.totalPrice = totalPrice;\n    this.partySize = partySize;\n  }\n}\nexport class RoomVacanciesComponent {\n  constructor(apiservice) {\n    this.apiservice = apiservice;\n    this.rooms = [];\n    this.roomIds = [];\n    this.bookings = [];\n    this.vacancies = [];\n    this.showRoomsClicked = false;\n    this.getAllRooms();\n    this.getAllBookings();\n  }\n  getAllVacancies() {\n    // Gets Bookings+Rooms, and \"removes\" booked rooms by roomNo\n    this.vacancies = [];\n    for (let i = 0; i < this.rooms.length; i++) {\n      if (!this.bookings.some(b => b.roomId === this.rooms[i].id)) {\n        this.vacancies.push(this.rooms[i]);\n        console.log(\"Hi i worked\");\n      }\n    }\n  }\n  getAllBookings() {\n    this.apiservice.getAllBookings().subscribe(response => {\n      this.bookings = response;\n    });\n  }\n  getAllRooms() {\n    this.apiservice.getAllRooms().subscribe(response => {\n      this.rooms = response;\n    });\n  }\n}\nRoomVacanciesComponent.ɵfac = function RoomVacanciesComponent_Factory(t) {\n  return new (t || RoomVacanciesComponent)(i0.ɵɵdirectiveInject(i1.HotelAPIserviceService));\n};\nRoomVacanciesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RoomVacanciesComponent,\n  selectors: [[\"app-room-vacancies\"]],\n  decls: 17,\n  vars: 2,\n  consts: [[\"id\", \"allCurrentVacancies\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"id\", \"allCurrentVacantSingle\"], [\"id\", \"allRooms\", 3, \"click\"]],\n  template: function RoomVacanciesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Room Vacancy Checker\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"table\")(3, \"tr\")(4, \"td\")(5, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function RoomVacanciesComponent_Template_button_click_5_listener() {\n        return ctx.getAllVacancies();\n      });\n      i0.ɵɵtext(6, \"Check All Currently Vacant Rooms\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(7, RoomVacanciesComponent_tr_7_Template, 3, 2, \"tr\", 1);\n      i0.ɵɵelementStart(8, \"tr\")(9, \"td\")(10, \"button\", 2);\n      i0.ɵɵtext(11, \"Check Currently Vacant Single Rooms\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"tr\")(13, \"td\")(14, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function RoomVacanciesComponent_Template_button_click_14_listener() {\n        return ctx.showAllRooms();\n      });\n      i0.ɵɵtext(15, \"get alll roooms\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(16, RoomVacanciesComponent_tr_16_Template, 2, 3, \"tr\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.vacancies);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rooms);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","vac_r2","roomNo","pricePerNight","ɵɵtextInterpolate3","room_r3","roomType","Room","constructor","id","Guest","firstname","lastname","email","phone","Booking","startDate","endDate","room","roomId","guest","guestId","totalPrice","partySize","RoomVacanciesComponent","apiservice","rooms","roomIds","bookings","vacancies","showRoomsClicked","getAllRooms","getAllBookings","getAllVacancies","i","length","some","b","push","console","log","subscribe","response","ɵɵdirectiveInject","i1","HotelAPIserviceService","selectors","decls","vars","consts","template","RoomVacanciesComponent_Template","rf","ctx","ɵɵlistener","RoomVacanciesComponent_Template_button_click_5_listener","ɵɵtemplate","RoomVacanciesComponent_tr_7_Template","RoomVacanciesComponent_Template_button_click_14_listener","showAllRooms","RoomVacanciesComponent_tr_16_Template","ɵɵproperty"],"sources":["C:\\Users\\flapj\\OneDrive\\Documents\\CSharpCodes\\Flappy-Mock-Hotel\\FlappyMockHotelUI\\src\\app\\room-vacancies\\room-vacancies.component.ts","C:\\Users\\flapj\\OneDrive\\Documents\\CSharpCodes\\Flappy-Mock-Hotel\\FlappyMockHotelUI\\src\\app\\room-vacancies\\room-vacancies.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HotelAPIserviceService } from '../hotel-apiservice.service';\n\nclass Room {\r\n\r\n    constructor(\r\n        public id: number,\r\n        public roomNo: number,\r\n        public roomType: number,\r\n        public pricePerNight: number,\r\n    ) { }\r\n\r\n}\n\ninterface RoomInterface {\n    id: number;\r\n    roomNo: number;\r\n    roomType: number;\r\n    pricePerNight: number;\r\n}\n\nclass Guest {\n    constructor(\n        public id: string,\n        public firstname: string,\n        public lastname: string,\n        public email: string,\n        public phone: string,\n\n\n    ) { }\n}\n\nclass Booking {\n    constructor(\r\n        public id: number,\r\n        public startDate: string,\r\n        public endDate: string,\r\n        public room: Room,\r\n        public roomId: number,\r\n        public guest: Guest,\r\n        public guestId: number,\r\n        public totalPrice: number,\r\n        public partySize: number\r\n    ) { }\r\n}\n\ninterface BookingInterface {\n    id: number,\r\n    startDate: string,\r\n    endDate: string,\r\n    room: Room,\r\n    roomId: number,\r\n    guest: Guest,\r\n    guestId: number,\r\n    totalPrice: number,\r\n    partySize: number\r\n}\n\n@Component({\n  selector: 'app-room-vacancies',\n  templateUrl: './room-vacancies.component.html',\n  styleUrls: ['./room-vacancies.component.css']\n})\nexport class RoomVacanciesComponent {\n    rooms: Room[] = [];\n    roomIds: number[] = [];\n    bookings: Booking[] = [];\n    vacancies: Room[] = [];\n    showRoomsClicked = false;\n\n    constructor(\n        private apiservice: HotelAPIserviceService\r\n    ) {\n        this.getAllRooms();\n        this.getAllBookings();\n    }\n    \n    public getAllVacancies() {\n        // Gets Bookings+Rooms, and \"removes\" booked rooms by roomNo\r\n\r\n        this.vacancies = [];\r\n\r\n        for (let i = 0; i < this.rooms.length; i++) {\r\n            if (!this.bookings.some(b => b.roomId === this.rooms[i].id)) {\r\n                this.vacancies.push(this.rooms[i]);\r\n                console.log(\"Hi i worked\");\r\n            } \r\n        }\r\n    }\n\n    public getAllBookings() {\n        this.apiservice.getAllBookings().subscribe(response => {\r\n            this.bookings = response;\r\n        })\r\n    }\n\n\n    public getAllRooms() {\n        this.apiservice.getAllRooms().subscribe(response => {\r\n            this.rooms = response;\r\n        })\r\n    }\n    \n}\n","<h2>Room Vacancy Checker</h2>\n\n\n<table>\n    <tr>\n        <td><button (click)=\"getAllVacancies()\" id=\"allCurrentVacancies\">Check All Currently Vacant Rooms</button></td>\n    </tr>\n    <tr *ngFor=\"let vac of vacancies\">\n        <td>{{ vac.roomNo }}: {{ vac.pricePerNight }} per night</td>\n    </tr>\n    <tr>\n        <td><button id=\"allCurrentVacantSingle\">Check Currently Vacant Single Rooms</button></td>\n    </tr>\n    <tr>\n        <td><button (click)=\"showAllRooms()\" id=\"allRooms\">get alll roooms</button></td>\n    </tr>\n    <tr *ngFor=\"let room of rooms\">\n        {{ room.roomNo }}: type = {{ room.roomType }}, {{ room.pricePerNight }} per night\n    </tr>\n</table>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}